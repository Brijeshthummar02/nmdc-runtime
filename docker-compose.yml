version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  # Tests use `postgres:11` image.
  # https://github.com/dagster-io/dagster/blob/0.11.9/python_modules/libraries/dagster-postgres/dagster_postgres_tests/docker-compose.yml
  dagster_postgresql:
    image: postgres:11
    container_name: dagster_postgresql
    volumes:
      - nmdc_runtime_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"

  # This service runs dagit.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_dagit:
    build:
      context: .
      dockerfile: nmdc_runtime/dagster.Dockerfile
    container_name: dagster_dagit
    entrypoint: ["tini", "--", "../lib/nmdc_runtime/entrypoint-dagit.sh"]
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - .env
      - .env.dev
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster_postgresql

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: nmdc_runtime/dagster.Dockerfile
    container_name: dagster_daemon
    entrypoint: ["tini", "--", "../lib/nmdc_runtime/entrypoint-dagster-daemon.sh"]
    restart: on-failure
    env_file:
      - .env
      - .env.dev
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster_postgresql

  fastapi:
    build:
      context: .
      dockerfile: nmdc_runtime/dagster.Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
      - .env.dev
    entrypoint: ["uvicorn", "nmdc_runtime.api.main:app", "--host", "0.0.0.0", "--reload"]
    volumes:
      - .:/opt/dagster/lib

  mongo:
    image: mongo:4.4-bionic
    container_name: mongo
    ports:
      - "27018:27017"
    volumes:
      - nmdc_runtime_mongo_data:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: root

  terminus:
    image: terminusdb/terminusdb-server:v4.2.0
    container_name: terminus
    ports:
      - "6364:6363"
    volumes:
      - nmdc_runtime_terminus_storage:/app/terminusdb/storage
    environment:
      TERMINUSDB_SERVER_PORT: 6363
      TERMINUSDB_ADMIN_PASS: root
      TERMINUSDB_AUTOLOGIN_ENABLED: "true"
      TERMINUSDB_HTTPS_ENABLED: "false"

volumes:
  nmdc_runtime_postgres_data:
    driver: local
  nmdc_runtime_mongo_data:
    driver: local
  nmdc_runtime_terminus_storage:
    driver: local